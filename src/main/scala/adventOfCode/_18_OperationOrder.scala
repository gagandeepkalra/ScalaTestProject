package adventOfCode

import scala.annotation.tailrec

/**
  * part 01:
  * The rules of operator precedence have changed. Rather than evaluating multiplication before addition, the
  * operators have the same precedence, and are evaluated left-to-right regardless of the order in which they appear.
  *
  * For example, the steps to evaluate the expression 1 + 2 * 3 + 4 * 5 + 6 are as follows:
  *
  * 1 + 2 * 3 + 4 * 5 + 6
  * 3   * 3 + 4 * 5 + 6
  * 9   + 4 * 5 + 6
  * 13   * 5 + 6
  * 65   + 6
  * 71
  *
  * 2 * 3 + (4 * 5) becomes 26.
  * 5 + (8 * 3 + 9 + 3 * 4 * 3) becomes 437.
  * 5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4)) becomes 12240.
  * ((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2 becomes 13632.
  *
  * part 02:
  * Sum now has higher precedence than product
  */
object _18_OperationOrder {

  sealed trait Expression {
    def evaluate: Long
  }

  object Expression {
    case class Symbol(left: Expression, operator: BinaryOperator, right: Expression) extends Expression {
      override def evaluate: Long = operator.evaluate(left.evaluate, right.evaluate)
    }

    case class Numeric(value: Long) extends Expression {
      override def evaluate: Long = value
    }
  }

  sealed trait Token

  case object OpenBracket extends Token

  case object ClosedBracket extends Token

  case class Operand(value: Int) extends Token

  sealed trait BinaryOperator extends Token {
    val precedence: Int
    def evaluate(left: Long, right: Long): Long
  }

  case object Sum extends BinaryOperator {
    override val precedence: Int = 1

    override def evaluate(left: Long, right: Long): Long = left + right
  }

  case object HigherSum extends BinaryOperator {
    override val precedence: Int = 2

    override def evaluate(left: Long, right: Long): Long = left + right
  }

  case object Product extends BinaryOperator {
    override val precedence: Int = 1

    override def evaluate(left: Long, right: Long): Long = left * right
  }

  @tailrec
  def tokenize(input: List[Char], acc: List[Token] = List(OpenBracket))(implicit sum: BinaryOperator): List[Token] = {
    input match {
      case Nil         => (ClosedBracket :: acc).reverse
      case ' ' :: tail => tokenize(tail, acc)
      case '(' :: tail => tokenize(tail, OpenBracket :: acc)
      case ')' :: tail => tokenize(tail, ClosedBracket :: acc)
      case '+' :: tail => tokenize(tail, sum :: acc)
      case '*' :: tail => tokenize(tail, Product :: acc)
      case _ =>
        val (ints, tail) = input.span(c => '0' <= c && c <= '9')
        tokenize(tail, Operand(ints.mkString("").toInt) :: acc)

    }
  }

  import Expression._

  def process(
    expressionStack: List[Expression],
    operator: BinaryOperator
  ): List[Expression] = {
    val r :: l :: tail = expressionStack
    Symbol(l, operator, r) :: tail
  }

  @tailrec
  def loop(
    tokens: List[Token],
    expressionStack: List[Expression] = Nil,
    operatorStack: List[Either[OpenBracket.type, BinaryOperator]] = Nil
  ): Expression = {
    tokens match {
      case Nil                    => expressionStack.head
      case Operand(value) :: tail => loop(tail, Numeric(value) :: expressionStack, operatorStack)
      case OpenBracket :: tail    => loop(tail, expressionStack, Left(OpenBracket) :: operatorStack)
      case (binaryOperator: BinaryOperator) :: tail =>
        operatorStack.headOption match {
          case None =>
            loop(tail, expressionStack, Right(binaryOperator) :: operatorStack)
          case Some(Left(_)) =>
            loop(tail, expressionStack, Right(binaryOperator) :: operatorStack)
          case Some(Right(prevOperator)) if prevOperator.precedence <= binaryOperator.precedence =>
            loop(tail, expressionStack, Right(binaryOperator) :: operatorStack)
          case Some(Right(prevOperator)) =>
            loop(tokens, process(expressionStack, prevOperator), operatorStack.tail)
        }
      case ClosedBracket :: tail =>
        operatorStack.head match {
          case Left(_) =>
            loop(tail, expressionStack, operatorStack.tail)
          case Right(prevOperator) =>
            loop(tokens, process(expressionStack, prevOperator), operatorStack.tail)
        }
    }
  }

  def parseLeftToRight(input: String)(implicit sum: BinaryOperator): Long = {
    val tokens = tokenize(input.toList).reverse.map {
      case OpenBracket   => ClosedBracket
      case ClosedBracket => OpenBracket
      case default       => default
    }

    loop(tokens).evaluate
  }

  def main(args: Array[String]): Unit = {
    val input = "1 + 2 * 3 + 4 * 5 + 6"

    println(parseLeftToRight(input)(Sum))
    println(parseLeftToRight(input)(HigherSum))

    val inputs =
      """(5 * 7 * 5) * 6 * 5 + 7 + 6 * 4
        |(2 + 3 + (2 + 8) * 3 + (7 + 4)) * 3 + 7
        |2 + 4 * (2 + 2 * (9 + 2 + 6 + 3 + 6) + 4)
        |4 * 3
        |9 + (8 * 5 * 5 * 4 * (3 * 5) * 2) + 4 + 4
        |5 + 5 + 2 * 4 + 4
        |7 + 9 * 2 + 2 * 3
        |5 + 8 + 5 * (6 * 8 * (9 * 2 + 2 + 7 + 4 + 2) + 4 * 6) * 5
        |8 * 7 * 4 * 5 + 3
        |(9 * 9 + 9 * 7 * 4) + 9 + 5 * (5 + (8 * 8) * (2 * 8) * (5 + 3 + 5 * 5 + 4 + 2)) + 2
        |(4 + 7 + 2) + 9 * 3 + 7 * ((8 * 7) + 5 * (9 * 9) * 8 + (8 * 2)) * 9
        |8 * 2 * (2 + 5 + (5 * 4 * 2 + 7 + 3 * 4)) + ((4 + 9) + (4 * 8) + (6 * 8 + 6) + (4 * 3 * 9) + 5) * 7
        |7 + 2 + 8 * 2 * (2 * (6 * 2 * 4 * 5) * (4 * 4) + 2 + 3 + 2) + 6
        |8 * ((6 + 8 * 3 * 9) + 9 + 8)
        |7 + ((6 + 3 + 7 + 6 * 7) + 6 * 6)
        |5 * (7 * 5 + 4 + 7 * 4 * 4) * (7 + 6 * 4 + 4 + (3 + 3 * 7 + 2 + 8)) * 8
        |((3 * 7 * 3 * 9) * 2 + (5 * 2 * 6 * 6 * 5 + 6)) * 4 + 6 * 4 + 7
        |2 + (7 + 5 + 9 + 9) * 4
        |(9 + 6 + 5 * 5 * 5 + 5) * 9 * 2 + (6 * (8 + 4 * 9) * 5 + 7) * 9 * 5
        |9 + 2 + (5 * 6 + 7) + 4 + 7
        |9 * (2 * 9 * 4 * 4 + 6 * 6) * 8 * 3 * (4 + 7 + 8 * 3 + 4 + 9) * 9
        |2 + 4 + 6 * 6 * (3 * 3 + 6 * 4 * 8) * (5 + (9 * 2))
        |9 + (6 + 8) + 7 * (8 * (7 + 6 * 4) + 7) * ((6 * 7) + 8 + 2) * 8
        |((6 * 3 * 2 + 8 + 4) * 6 + (7 * 7 * 7 + 3)) * (2 * 5 + 2 * 3) + ((2 + 8 * 5 + 4) + 6 + 6 * (3 + 8 * 9)) * 5 * 4 + 2
        |(4 + (3 + 9 * 9 + 9 + 2 * 3) + 6 * 2 * 3) + (7 * 7 * 8 + 6 * 5) * 7 + 8 + (7 + 7 + 4)
        |9 + (5 + 5 * 4 * 4 * 3 * 8) * 6 + 5 + 4
        |8 * 2 + 9 + 7 + 6 * (3 * 6 * 7 * 6 * 8)
        |(7 + 6 * 3 * 3) * 8 + (8 * 2 * 5 + 8 + 2) + 4
        |5 + 9 * 5 + 5 * 6 + (7 * 8 * 8 + (2 + 9 * 4))
        |((7 * 4 + 2 + 6 + 3) * 4) + 7 + 7
        |(7 * 8 + 8 + 3) * 3 * (9 * 5 * 3 * 9) * 5
        |6 + (8 + 8 * 7 + 7) + (5 + 7 * 4 * 4 * 5) * 5 * 2 * (5 * 4 * 5)
        |2 * (5 * (8 + 5 + 8)) * 5 * ((6 + 9 + 6 + 8 + 9) * 4 + 8 + 7 + (5 * 7 * 2 * 3))
        |8 + 9 * 7 + ((6 * 4 + 3 * 9 + 9) * (3 + 8 * 5 * 4 + 5 + 5) * 2 + (2 * 2 * 3 * 9))
        |2 * 9 + 4 * (2 * (7 + 8 * 2 * 9 + 2 * 6) * 3 * (6 + 3 * 7 * 7 + 4))
        |5 * 3 + (8 * 6 + 7 * 8 + (8 + 3)) * 7 + 3 * 2
        |((2 * 7 + 7) * 9 * 8 * 7) * 6 * (6 + 2) * 9
        |7 * 6 * (3 * (5 * 7 + 5 * 4) * (4 + 6 + 3) + (6 * 7)) * 3 * 8
        |(3 * 6) + 7 * 2 * 6 + 7 * 3
        |6 * 3 * ((4 + 8 * 7 + 2) * 3)
        |6 + 9 + (3 * 9 * 5 * 8) * 7 + 8
        |8 + 6 + 2 * 2 + ((7 + 4 * 9) + 8 * 4)
        |6 * 3 * 5 + 7 + 5
        |((4 + 5 * 2) + 6 * 7 * 7 * 6) * (7 + 8 * 4 + 9)
        |(8 * 5 + 8) * (5 + 4 * (5 * 7 * 4 * 8 + 4 * 4) * 9) + (2 * 2 + (8 + 3) * 4) + (4 * 4)
        |6 * (5 * 4 + (5 + 8 * 7)) * 2
        |(2 * 2 * 9 + 9 + 8) * (6 * 6 + 8 * (5 * 4) * (3 + 8) + 2) + 5 + 2
        |2 * (3 + (5 + 4 * 4 * 2 + 8) + 8 * 2 + 8 + 5)
        |3 + 9 * (7 + (2 * 5 * 5 * 4 * 9) * (8 * 3) + 5) * 2
        |(2 * (2 * 4 * 7 + 7 + 4)) * 8 * 6 * 7
        |(4 * (5 * 2 * 3 * 7) * 5 + (2 * 9) + 6) + (6 + 8 * (4 * 6 * 4) + 2 * 6 * 2) + 6 * 5 + 5
        |5 + (7 + 3 + 6 + 9 + 5 + (3 + 9 * 8 + 8 + 7)) * 9 * 9
        |3 + 2 + (4 * 6 + (2 * 8 + 6 * 7) + 6) * 9 * 9
        |(3 + 2 * (8 + 9 + 8) * 5) * 3 * 3 * ((3 + 9 * 7) + (9 * 8 + 6 * 9 * 9 * 3) * 5 * 7 + 4) + 5 * 4
        |7 * 6 + 8 + 2 * (5 + 3 * 5 * 5 * 7 + 8) + 9
        |7 + 6 * 6 + (5 + 6) * (8 * 3 + 2 + 9)
        |6 * (7 + (3 + 8 * 9 + 4 + 7) + 6 * (2 + 8 + 3) * 5) + 9 * (5 + 5 * 2) + 8 + 3
        |(6 + 6 * 9 * 3) * 6 * 3 + (5 * 4)
        |6 * 9 * 8
        |7 * 4 * (8 + 7 + 7) * 4 * 7 + 4
        |5 + 8 * 5 * 7 + 7 + 5
        |2 * ((9 * 3 * 7 + 6 * 6) + (5 * 3 * 2 * 8)) * (8 * 3 + 2 * 6) * 6 * 5
        |9 + 5 + 6 * 5 + (9 * 4 * (8 + 2) * 6 + 4 * (2 + 3 + 2 * 2)) + 4
        |6 * 4 + (2 + 4 + (6 * 9 * 3 * 8 * 6 + 8)) * 4 + 5
        |9 + (3 * 5 * 4 * 9 + 6) * 7
        |9 + (8 * 2) * (3 * 7 + (7 * 2) * 8) + 5 * (7 + 9 * 7 + 3)
        |(5 + 3 + 4 + 8 * 3 * (6 * 5 * 9 * 3)) + 2 * 4
        |4 + ((2 * 9 * 2 + 5) * 6 * 5) * (5 + 2) + 7 * 5 + 5
        |8 * 3 * (9 * 3 + 5 * (5 * 4 * 3))
        |8 * ((3 + 8 + 5) + 6 + 9) + 7 + 4 * 5
        |(9 + 9 + 7) + (7 * 2) * (7 * 3 + (5 + 2 * 3) * 9 * 3) + ((2 * 6 + 2 + 7 + 8 * 2) * (2 + 3) + 4)
        |(9 + 8 * 9 * (7 + 7) + 5 * 7) + 9 + 2
        |3 + (8 * 5 + 9) + 2 + 8 + 8
        |5 + 2 + (5 * 8 * 3 * 7 * (3 * 7 + 6) * 4) * 3
        |((7 * 9 + 3 + 2) * (9 + 9 + 7) + 4 * 4) * 7
        |(7 * (3 * 8 + 3) + 4 + 6 * (4 * 7 + 9)) + ((4 * 6 * 6 * 9) * (6 + 3 + 2 * 8 + 5 * 7) + 3 + 2 * 2 + 3) * 2 + (6 + 4 * (6 + 7))
        |7 * (6 * 7 + 6) + 2
        |4 * (3 * 4) + 9 + 8 + (4 + 5 + 9 * (7 + 9 + 5) + 7 + 2)
        |7 + 2 * 5 + (4 + (8 + 3 * 3 + 6) * 5 * 7) + 6 + 3
        |(4 + (9 + 8 * 7 * 7) * 3 * 6) * 7 + 9 * 7 + 5
        |2 + 4
        |(2 * (8 + 3 + 8 * 2 + 7 + 3) + 7 + 7 + 6) * 3 * 7 * 7 * 2
        |9 + 6 + 2 + (5 + 5 + 2 * 3) + 9
        |3 * (6 * 8 + 2 * 8 + 7 * (3 + 3 * 4 + 2 + 7)) * (4 + 4 + 6 * 2 * 4 + 4) * 8
        |5 + (5 + 8) + (2 + (7 * 9 * 2 + 8) + 6) + 9 + 3
        |9 + 5 + (8 * 4 * 3 + 4) + (6 * 3 * 9) * 3
        |(5 * 7 * (7 * 7 * 6) * (8 + 2) + 8 * 7) * 3 + 7
        |8 * (6 + 6 * 4 + 9 + 4) * 3 * 6 * 8 + 6
        |5 * 5 + 2 * (5 * 2 * 9 + (6 + 7)) * 7
        |(5 * 6 * 5 * 3) * 2 + (8 + 6 + 9 * 7 + (2 * 3 + 3 * 8 + 5 + 2))
        |8 + 7 * ((6 + 4 + 4 + 8 + 7) + 2 * 5 + 3 * 9 + 6) * (3 * 5 * 5 * 9 * 4) * 3 + ((3 + 4 + 2 * 3 * 2 + 2) + 7)
        |(8 + (9 * 6 * 3) * (9 + 8 + 3) + 4) * 5
        |4 + (4 + 2 + 7 + 9 * 3 * 7) + 9 * (5 + (9 + 9 + 7 + 8 + 8) * 7 + (2 + 2 * 9 + 3)) + 3
        |4 + 5 + 5 * (6 * 6 + 3)
        |(7 * 7 + 6 * 7 * (4 * 2 + 9 + 7)) + 8
        |(4 * 7 + 9 * 6) * 6 * 4 + 8 * (6 + 7 * 9) * 2
        |7 + (8 + 9) * 6 * 3 + 4
        |8 * (7 * (7 * 3 + 3) + 3 * 5 * 9 * 2) * 6 * ((2 + 4 * 5 * 2 + 5 + 3) + 4 + (4 * 2) * 2 * (9 + 5 + 3 + 7) * 5) + (5 + 5 + 3 + (6 + 6 * 2 * 8 + 6))
        |6 * 6
        |8 + 5 + 5 + (8 + (3 * 5) + 5 * 3) * 2 + 5
        |((4 * 7 * 3) * 7 + 2 * (6 + 2) * 8) * 8
        |(6 + 3 * 5 * 5 * 6 + 2) * 3 * 7 * 6
        |6 + (9 * (4 * 8 * 5 * 3 + 6 * 9) * 4 * (8 + 3 + 3 * 4) * 6 + 4) + 4 * 2 + 9
        |((5 + 4 + 6) + 7 * 8 + 7) + 8 + 9 * 8 + 3
        |(4 + 2 + 5 + 4 * 7 * 9) * (7 + (2 * 9) * 8) + 3 + 5
        |(3 * 6 + 8 * 8 + 2) * 6 + 4 + (7 + 2 + 6 + 2 * 7)
        |8 + (2 * 9 + (3 + 4 + 3) + 2)
        |5 + 2 * (5 * 9 * (6 * 8 * 3 + 6) * 8 * 5 + (5 * 4)) + 9
        |6 + ((8 * 3 + 5 + 9 * 9) * 3 + 6 * 9) * (5 + (5 * 4 * 8 + 5) * 4 * (3 * 2 + 7 * 7 * 4) + 2 * 2)
        |9 + 4 * (2 * (6 + 9 + 6 * 8 + 7)) * 9 * 2
        |4 + 8 + (8 + 5 * 8 + 7)
        |8 * (2 + 4 + 5 + 7 * 6) * (4 + 9 * 4 + 7 * 2 * 7) * 6 + 9 + 4
        |8 + 3 * 8 * (2 * 5 + 5 + (5 * 2 * 6 + 3) + 6) * 9
        |((4 + 5 * 7) * 9 * 8 * 2 + 6) + 9 + 7
        |((4 + 3 * 6 * 3 * 4 * 7) + 3 * 5 * 4) + 9 * (8 + 7 * 2 * (2 + 8) + 9 * (2 * 8)) * 5 * 5 * 8
        |2 + (5 + 6) * 4 + (9 + 5 * 5 * 7 * 5 + 2)
        |6 + 6 * (6 * 3 * (2 + 3 + 4 * 3 * 7) * 3 * (4 * 9) * 5) * 9
        |7 * 2 * (9 + 8 + 3 * 9 * 4) + 8
        |(9 * 8 * 2 + 7 * 2 * 8) * 4 + 9 + (3 + (3 + 3 * 5 + 2) + 9 * 4 * (5 * 3 + 2)) * 6
        |7 * 2 * 9 + ((5 * 5 * 8 * 4 + 3 + 7) + 8 + 2 + 3 + 6) * 5 * (8 + (5 + 6 + 7 + 6 + 8 * 6) * 6)
        |5 + 6 * ((3 * 7 * 2 + 6 * 9) * 6 + 2 * (8 * 5 * 5 + 9 + 8)) * 6 + 4 * 7
        |7 + 7 + 9 * 6 * 4 + 3
        |4 + (3 * 8 + 8 + 2) * 8 * (9 + 3 + 7) * (4 + 7 + 2 + 5)
        |9 * 2 + 5 + 6 * 6 + (3 + 9 * 6)
        |(6 + 3) + 5 + (4 * 6 + 8) * 6
        |9 * (6 + 6 * 7 + 6) * 7 * 3 * 5 + 4
        |(7 + 8 + 8 * 2 + 5) + 7 + 2
        |(5 * 4 + 8) + 9 + (3 + (8 + 2 * 5 * 7) * 9 + 3) * 7
        |(2 * 3 + (7 * 4) + 8 * (6 + 4 + 7 * 4 + 5 + 4)) * 7 * 9 * 8 + (3 + 6 + 6 + 9 + 2)
        |2 * 2 * (3 * (5 + 4 * 4 + 9 + 7) + 5 * 8 * (7 + 2 * 2))
        |2 * 5 * 8 + 6 + (2 + 3 * (7 + 4 + 4)) * 6
        |3 + 3 + 2 + 8 + (4 + 9 * (5 + 7 * 3 * 8 + 4))
        |(6 * 8) * 5 + 5 * 8
        |2 * 3 * 9 * (3 * 7 + 6 + 9) + 2 + 6
        |5 * 8 * (2 * 3 * 7 + 3) * 7
        |2 + (5 * 5 * 8 * 7 + (3 * 9) * (3 + 8 + 3)) * 5 + (6 * 2 * 9 + 3 + (4 + 4 * 7 + 6 * 6 + 8) + 9) + 5 + 9
        |(3 * 5 + 7 + 5 + 5 * 7) * (2 + 4 * 4) + 5 * 6 + 9
        |4 + 4 + ((9 * 3 + 5 + 4 * 7) + 6 * 6 * 2 + 9 * 2) * 9 * 9
        |7 * (4 + 7 + (5 + 5 * 8 + 8 * 3 * 3) + 7 * 7 + 7)
        |2 + 9 + 2
        |((9 * 8 + 4 * 3 + 6 + 6) + (4 * 2) + 2 * 9 + 4) + 6 + 7 + (3 + 8 * 9 * 8) + 2 * 2
        |(3 + 6 * (9 * 6) * (2 + 6 + 7 * 4) * 7 * 3) * 9 + 8
        |4 + 7 * (2 * 2 + 6) * (2 + 4 + 6 * 5 + 6)
        |(8 * 7 * 4 + 7 * 5 + 7) + 6 * 2
        |2 * 2 + 3 * (4 + (3 + 9 * 3)) * 4
        |6 + 5 * 5 + 9 + ((7 + 6 + 2) + (2 * 6 * 2 * 5) * 7 * 4 * 3 * (6 * 4)) + 9
        |3 + 2 * ((9 + 2 + 2 + 6 * 9 + 4) + 5) * 8 * 9
        |(8 + 4) + 2 + (2 * 2 + 8 * (5 * 6 + 6 * 4 + 9) + 8) + 2 * 8 + 2
        |2 * 5 * 7 * 6 * (8 * (2 * 7 * 4 + 6) + 3 + 9 * (8 * 3 + 2) * 8)
        |4 + 3 + 4 + (6 + (6 + 4 + 7) + 4 + 7) * 6
        |8 + 5 + (9 * 6 * 6 + (3 * 9 + 3 + 6 + 9))
        |((3 + 6) + 6 * 3 + 3) * 2 + (9 * (8 * 7) + (2 * 9 * 6) * 6 + 2) * 8 + 2
        |((7 * 4 + 7 * 4 + 2 + 7) * 3 * (7 * 8 * 4 + 8 + 4 + 4)) * 6
        |6 * 4 * (8 + 5 + 2)
        |(8 + 5) * 2 + 4 + 6 + 3
        |((4 * 5 + 7 * 2 * 8 + 9) + 4) + 7 + 3 * 8
        |2 + 2 * 3 + 7 * (3 * 6 + 9 + 5 * 7 * 5)
        |8 * (9 * 8 * 7 + 9 * 6 + 9) + 9
        |5 * (4 * 3) * 6
        |5 * 6 * 8 * (2 * (4 + 5) * 4) + 3
        |4 + 8 * (2 + 6 * 8 * 7 + 9 * 3) + 5
        |2 * 3 * 7 * (2 * (7 + 7 + 8) + 8 * 7 + 6 + 2) * 7 + ((4 * 2 * 3) + 9 * 7)
        |9 + 6 * 6 + (3 + 4 * 3 + 9 + 5 + 3) * 4
        |(2 * (4 + 3) * 9) * (2 + 9 * (6 + 6 + 3 * 5 + 2 + 4) * (2 + 5 + 4 + 7) + 2 + (4 + 4 * 8 * 7 * 7)) + (3 * 7 * (3 + 3 + 3 + 2) * (6 * 3 * 8)) * 4 + 4
        |(4 + 7) + (3 * (5 * 3 + 5 + 9) * 9 * 3 * 9)
        |9 + 7 * ((2 + 2 * 8 + 7 + 6 * 5) + (6 * 7) * (3 + 6 + 8 * 5) * (8 * 8) * (3 + 3 * 7 + 4 + 7))
        |9 + 9 * (3 * (6 + 7 * 9 * 7 + 3)) + 3 + 6 + 9
        |2 + ((3 + 7 * 8 + 9) + (8 + 8 * 9)) + 6 + 7 * 8
        |4 * (6 + 8 * 8 + 4 * (3 * 2))
        |(5 + 5 * 3 * 3 + 3) * 7 + 7 + 3
        |2 * (2 + 6 + 4 * (3 + 4 + 7 * 8 * 9 + 9)) * 9 * 7
        |(4 + 6 + 7 + 4) * 7 * ((4 + 9) + 8 + 5 * 7)
        |8 * 6 + 6 + 7
        |(5 + 3 * 2 + (4 * 4 + 5 * 4) + 3) + 7 + 8 + 8 + 7 * 3
        |4 + (7 * 5 + 6 * 7 + (2 * 7 * 8) * 3)
        |7 * ((3 * 3 + 2) + (8 + 6)) * 4 + (7 * 7) * 8 * 7
        |((5 * 8) * 6 + 8) * 5 * 7
        |3 * 3 + 5 + ((2 * 4 + 3 + 8 + 8) + 2 + (7 * 9 * 6) * 6 * 6)
        |7 + 7 + 5 + 4 * ((5 + 8 * 8) + (2 * 2 * 2 * 6)) * 6
        |(4 + 6 + 7) + 2 + 3
        |(8 + 8 + 2 + (4 + 6 * 4 + 9 + 9 + 4) * 6 * 4) + 9 * 4 + (9 * 7 + 5 * (3 * 9 + 4 + 7) + 7 * 4)
        |8 + (8 + 5) * (8 * (3 + 3 + 5 + 9))
        |8 + (4 + (7 + 8 + 4 + 9 + 4) * 7 + (5 * 9 + 2 * 6 + 6) + 4 * (7 + 2))
        |(3 * 7 + 8 + 6 * 3) + 5 * 5 + 7 * (9 + 5 + 7 * 8)
        |(9 + 7 + 2 + 2) + 4 * 4 * 9
        |2 + (4 + 4 + (8 * 9 * 2 * 7 * 2) * 8 * 5) * 5 + (4 + (3 + 2) * (3 * 2 * 9 + 9 * 8 + 5) + 2 * (3 * 4 * 7 * 5 * 6 + 7) * 5)
        |(2 * 6 * 9 * 7) + (4 * (4 + 3) + 9) * 9
        |4 * 3 + 5 + (6 * 6 * 3 * 9 * 7) * 7 * 4
        |8 * 6 * (2 * 6 * 2 * 7 * (6 + 4)) * 4 + 5
        |4 * 9 + 7 * 6 * ((9 + 7 * 5 * 5) + 7 * 9)
        |3 + (8 + (5 * 2 + 8 * 7 + 6 + 3) + (7 + 9 * 2 + 3) * 6 * 7)
        |4 * 7 * 4 * (4 * 5 + (7 + 6 * 7 + 8)) + 4
        |(8 + 5 * 3) + ((8 * 7 + 6 * 5 + 8 + 9) * 5 + 2 + 7 + 8 * (5 + 7 + 4 + 4)) + 3 * 9
        |6 * (7 + 2) + 4 + 7 * 2 * 5
        |(2 * 9 * 9 * (3 * 4)) * 7 * 4 + 2 + 4
        |(8 + (9 * 2 * 8) + (5 * 9 * 5) + (5 * 6 * 3 + 8 * 2 + 6) * 5 * 5) * 6 + 8 + 3 * 3 * 2
        |2 * 5 * 7 * 4
        |(2 * 8) * (2 + (4 + 2 * 5 + 2) * (2 + 7 + 6) + 5 + 5 + 7) * 4 + 8 * 7
        |(8 * 5 + 4) * 5
        |(9 * 6 + 8 * (3 * 8) + 5) + (8 * (3 * 9 + 7 * 3) + 9 + 2 + (4 + 5 * 7 + 6 * 9)) * 6 * 8
        |5 * 4 + 3
        |(8 + 7 * 9 + 5 * 5) + 9 + 3 * (6 + 6 + 5)
        |(3 * 7 + 2 * 4 + 4) + 8 * 6 + 3 * 5
        |((4 + 8 + 8 * 7) + 9 * 7 + 8 + (8 + 3 + 2) * 3) * 2 + (6 * 7) + 8
        |(7 + (3 * 5 * 7 * 6) * 7 + (8 * 3 + 9 + 8 * 9 + 8) + 8) + 9
        |((6 * 7 * 7 + 4) * 8 + 6 + 4 + 9) + 7 + 4 + 2 + 5 + 5
        |4 * (2 * 2) + 2 + 3 * 3 + (4 + 2 + 2)
        |((4 * 8 + 8 + 9 + 3 + 3) * 9 * 9 + 7 * (6 * 5 * 3 + 3 + 3)) + (9 * 5 * 2) + (2 + 7 + 6) * 3 * 6
        |(4 * 5 * (8 * 7 + 8 + 4 + 3 * 9) * 3 + 7 * (3 + 4 + 3)) + 3 + 6 * ((6 + 2 * 8) * 9) + 2 + 4
        |7 * 3 + 8 + (8 + 2 * 9 * 2 * (7 + 4 + 7 + 7 * 7 * 8)) * ((4 * 6 + 7 + 4 + 6) + 5 + 3 + 6 * 6 * (6 + 2 * 9 + 6 * 7 + 3)) * 5
        |(7 * 8 + 2 * (5 * 7) + 7 * 4) * 8 + 2 * 3
        |4 + (8 * 3 + 9 * 9 * 3) + 7 + 7 + (3 * 4)
        |(4 * (5 + 9)) * 9 + 5 + 7
        |6 * 2 * 9 + 4 + 6 * 2
        |(7 + 3) * ((3 * 7) + 8 + (8 + 6 * 2 * 8 * 6 + 2)) * (7 + 9)
        |9 * 4 * 3 + 7 * 6 + (3 + 8)
        |4 * ((2 * 6 + 3 * 4) + 3 * 4) * 7 + 8
        |(8 + 7 * (4 * 8) * 6) + 7 + 4 * 4 * ((8 * 9 * 7 * 9 + 7 + 3) + 6 + 8)
        |5 * (9 + 3 * 4 * (2 * 9 * 4 * 2 + 3) * 8)
        |4 * 9 * 8 * 7 + (6 * 9)
        |(4 + 4 + 3 + 5) + 9 * 4
        |9 + (4 + 7 + 6 + 4 * (8 * 9 * 7 * 3 * 2 * 6)) + 3 * 6
        |5 + 6 + (6 * 5) + 8 + 7
        |(9 + 4 * 8 * (8 * 7 * 2 + 4) * (5 * 4 + 9)) + 6 + 5
        |5 * 2 + 9 + ((3 + 2 * 9 + 3) * 5 * 9 + 2 + 3) * 8 + 5
        |(6 + 8 + (3 + 8 + 4 * 4) + 6 * 9 * 3) * 7 + 3 + (5 * 9 + 2 + 7 + 6 * 8) + 5 + (3 + 2 + 2 + (3 + 4 + 2))
        |9 * 3 + 7 + 6 * 7 + 3
        |(2 * 4 * 3 * 7 + 5) + 6 + (2 + 7 + 4 + 3 * 4) + ((7 * 2 + 7 + 6 * 8) + 6 * 2 * 5)
        |((2 * 4) + 3 + 6 + 6 * (7 * 4 * 6 * 5)) * 3 * 6 + (9 * 5 + 8)
        |(4 * 3 * 4 * 4) + 5 + 8 + ((8 + 6 + 8 * 9 + 7 * 5) * (6 * 2 * 3 * 6 * 8) * 3) + 8
        |(3 * 8 * (8 + 4 * 2 * 9)) + 4
        |3 + 7 * 7 + 3 + 9
        |((4 * 7 * 2) * 2) + 2 + 9 * 3 * (9 * 3 + (8 * 5 * 9 * 9) * 6)
        |9 * 6 * 4 + 5 + (6 + 5 * 4 * (8 + 9))
        |2 * (2 * (6 + 2 * 2 + 9 + 6) + (8 + 8 + 7) + (6 + 8 + 7)) * 2 + 5
        |5 * 8 * 2 + (7 * 7) + 7 + 6
        |6 + (5 * 9 * 7) * 3 * 7
        |3 + 9 * (4 + (5 * 8 + 4 + 4 + 5))
        |4 * 7 * (8 * 2 + (3 * 8 + 9 + 2 + 6 + 6))
        |(9 + 3) * 6 * 9 * 2 * 8 + (7 * 8)
        |(8 * 2 + (5 * 8 + 6 * 9 * 8 * 3)) + 9 * ((9 + 6 + 3) * 6 * 4 * 4 * 5) + 8
        |3 + 3 * (3 * 6 + 8 + (8 * 7) + 5) + 7
        |5 * 3 * 2 * 3 * (4 + 9 + 8 * 9)
        |(8 * (9 + 5 * 8) + (6 * 8) + 2 + (8 + 3 + 4 * 5 * 3) + 4) * (4 * 4 * 9 + 9 * 6) + 6 + 3
        |2 + (5 + 8 * (5 + 4 * 7 * 4) + 4 * 7 + 5)
        |5 + ((6 * 9 + 5 + 5) + 2 * (4 + 4 + 2 * 6 + 3 + 9)) * ((3 * 5 * 2 * 8 * 5) + 2 * (4 + 9 + 5 * 9 * 8) + (2 + 6 * 6 * 5 + 3 + 9)) * (2 + 9 * 9) + 2 * 6
        |5 + 2 * ((7 + 4) * 3 * 6) + 7
        |4 + 3 * 6 * 8
        |(8 + 7) * 5 + (2 + 5 + 3 + 4 * (3 + 7) + 3)
        |(2 * 2 * 7) + 2 * ((4 * 5 * 2) * 5 + 9 * (7 * 4 + 2 * 2 * 9) * 9) + 9
        |3 + 6 * (7 * 7 * 2) + 6
        |6 + (2 * 7) * 4 * ((3 * 2 * 4) + 3) + (7 + 2 * 7 * (5 * 2 * 3 * 3 + 8) + 7 + 7) * 8
        |(5 * 3 + (8 * 8 * 5 + 3 + 2) + 6) * 5 * ((5 + 2) * (9 * 7 * 2 * 3 * 6) * 6 * (9 * 5 * 5 + 3 + 9) + (9 + 3 * 5))
        |9 * 4 * 7 * 3 + (5 + 2 * 6 + 9) + (2 * 4)
        |(4 * (9 + 3 * 7 + 7 * 5) + 2) + 6 * 4
        |8 + 5 * 6 * 2 * 2 + (8 * 4 + 6 * 9 + 2 * 5)
        |4 + (9 * 4) * 5 + (2 * 8 * 7)
        |7 * (3 + (4 * 3 + 8 * 3 * 3) * 5 * 4)
        |9 + 7 + (3 * 3 * (7 * 4) + (9 * 4 + 3 * 6 + 6 * 7) + 9) * 2 + 5
        |8 + 6 * 9 * 4
        |8 + 3 * (9 + (3 * 7 + 3 + 9 + 3) * 9) * 4 + 8
        |4 + ((6 * 4 + 4 * 2 * 6 * 5) + 2 * 2) + (4 + 5 + 8 * 5 * 5) * 3 * 5 * 7
        |(9 + 8 + 6 * 5 * 5) * 4 + (8 * 3 * 5) * (9 + (3 + 9 + 5 * 3 * 6 + 6) * 7 + (8 * 8 + 8) * 2 + 4)
        |(8 * 6 * 2 + 5) * 9 + 6 * 2 * 5
        |2 * 5 * 3 + 7 + 6 * 6
        |(3 * (4 * 9 + 6 * 2) * 8 + 8) + 7 * 5 + 9 + 2 * 2
        |8 + (8 * 4 + 6 * (7 * 7 + 3 * 4 * 7 + 2))
        |3 + (7 * (4 * 8 * 8 + 3 * 9) + 2 * 9) + 6
        |8 * (6 * 9) * 7 + (9 + 2 * 9 * 7) * (3 + 7)
        |((6 + 7 + 4 + 8) * 5 * 7 + 3 + (8 * 2 * 5 + 9)) + 5 * 2 * 9 * 4
        |3 * (7 * 7 + 6) * 3 * (5 * (7 * 2 + 6 * 9 + 9) + 3 + 6 * 9 * (2 * 3 * 6 * 9)) * 6 * 5
        |(2 * (9 + 4 + 4 + 5 + 5) * (6 * 7 * 4 * 9) * (9 + 4 + 8 * 4) * 3) * (9 + 3 + 3 * 3 * 4 * 2) * 5 + 2 + 5 + 3
        |(7 * 8) + (8 * (3 * 8 + 4)) + 3 * 7 * 7 * 6
        |2 * 6 * (6 * 3 * (2 + 8 * 5 * 3 + 3 + 4)) * 5 + (9 + 9 + 2 + 3 * 3)
        |5 + 7 + 4 * 2
        |4 * 3 + 7 + 9 + (5 * 2 + (5 * 6) + 3 + 4) + 6
        |8 * 4 * (9 + 3 + (7 * 8 + 7 * 6 + 4 * 3)) * (6 + 9 + 9 * (3 * 7 * 9 + 2 + 2 + 2) * 6 + 4) + 8
        |(5 + 9 + (8 + 7 + 6) + 8) + 6 + 2
        |2 * (9 + 3 + 4 + (5 + 5 + 2 * 2 + 3 + 8) + 9) * 6 * 7 * 2
        |5 * (6 * 7 + 2) * 9 + 7 + 4 + 3
        |9 + ((4 * 4 + 3 + 8 * 6 * 7) * (8 * 4 + 9 * 4 + 8) + 6 + (9 * 3 + 5 + 7 + 9 + 3))
        |6 * (3 + 8 * (5 * 7 + 5 + 8)) * 5 * 4 + 8 * 3
        |7 * (3 * (7 * 4 * 8) + 4 + 3 * (2 * 3)) * 4 + (7 + 6) * 9
        |(3 + (5 + 4 + 3 * 3 * 2 + 9) + 7 + 2) + 6
        |3 * (5 + (3 + 3 + 4 * 5 * 8 * 9) + 9)
        |4 * (6 + 4) + (8 * 4 * (8 + 8 * 7 * 8 * 4) * 8) * 7
        |(9 * (4 * 5 + 9 * 6 * 7 + 4) + 4 * 3) * 5 + 7 + 7 + 9
        |5 * (7 * 8 * 8) + 4 + 9 + (4 * (3 * 5 * 6 * 7) + 4 * 8 * 4 * 3) + 2
        |4 * 6 + 8 * ((3 + 4 * 3) + 6 + 3 + 2 * 5)
        |6 * (2 + 4 * (7 * 4 * 4 + 4 + 6) * 4) + ((9 + 7 * 6 * 7) * 8) * 7 * 3 * 9
        |3 + (3 + 2 * 7 * 6) * (5 * 2 + 2 * 2) * 2 * (5 * 2 + 3) + 8
        |6 * 2 * (8 * 9)
        |7 * 4 + 9 * (9 * 2)
        |(2 * 6) + (6 + 7 + 5 + 8 + 4)
        |6 + (9 * 5 * 6 + 5 + 6 * 6)
        |(5 + 9) + 2 + (5 * 7)
        |7 * 7 + 4 + (4 * 3) * 8 * (4 * (3 * 3 + 6))
        |7 * (8 + 5 + (3 + 7)) * (4 + 4 + 8 + (7 * 7 * 6 + 9)) + 6 * 8 + 8
        |4 + (8 + (5 + 2 * 7 + 6 * 7 * 6) + 5 * 9)
        |8 + (6 + 3 * 7 * 8 + 8 * 7) + 8 + 5 + 8 * 9
        |7 * (7 * (3 + 3) * 6 + 9 * 7 + (2 + 3 + 6 * 8 * 6)) + 3 * (7 * 9)
        |(5 * (4 + 6) * 4 * 8 + 6 * 3) + 6 + 2 + (8 * 5 + 9 * 3 + (5 + 7 * 5 + 7) + 3)
        |(2 * 7 + 3) + 9 * 8 * 7
        |(4 * 3 + 9 * 5 + 4 + 4) * 9 + (3 * 9 * 7 * 4) * (3 + 5 * 4 + 6 + 5) + ((7 + 6 * 7 * 4 + 5) + 2 * 7 + 8) + 8
        |(7 * 4 * 4 + 7) + (6 * 9 * 7) + 5 + (3 + 5 * 9 * 4 * 9 * 2) + 4 * 7
        |(4 + 2 * 2 * 8 + 5 * 3) + 4 * 5 * 3 * (4 * (2 * 3 + 2 * 8 + 2) + 4 * 9 * (6 + 3 * 7 * 3) * 5) + (7 * 8 * 9 + 3 * 9 * 4)
        |8 + (3 + 3 + 2)
        |6 * (3 * 6 * (3 + 5 + 8 + 5 + 5))
        |(9 + 7 * 9 + (3 * 4 * 2 * 2 * 7) + 5 + 9) + 7 + (9 * (8 * 9) * 9) + 3
        |(9 * 6 * 8 * 2) + (6 + (9 * 5 + 6 * 5 + 5 + 5) * (6 + 7 * 8 * 4 + 4 + 6) + 9) + 9 * 7 * 4
        |4 + (3 * (3 + 4)) * 8 + 4 + 2
        |((9 * 2 * 5 * 3 + 9 + 3) * (7 * 6 * 9 * 8 * 2) * 8 + 4) * 6 + 8 * 6 + 9 + (4 * 3 + 2 * 9)
        |(8 + 5 + (6 * 7 * 2 * 4 * 8)) * (9 + 8 + (4 + 8 * 2 + 8 * 4) * 9 * 8 * 9) + 7 + 9 + 7
        |(5 + 2 + 3 * 5) * ((9 * 8) * 8 * 2 * 6 + (9 * 4 * 7)) + (5 + 3 * (5 + 7 + 6 * 4 + 8 + 5)) + (7 + 6 * 2 + 2 * 6 * 7) + 2
        |7 * 2 + 7 + 8 + (9 * 9 + 8 * 6 + 7 * 7) * (7 + 3 + 5 * 4)
        |5 * (5 + 2 + 6) * 2 + (7 * 5 + 4 + (8 * 9 + 8 * 9 + 8) + 3)
        |4 + (3 + (4 * 4) + 8 + 8 * 9 + 7) * (4 * 4 * 2) + 8 * 5
        |6 + 4 + ((5 + 7) + (8 + 9 * 3 + 5 * 9)) + (4 + 8 + 7 * 6) * 5
        |3 + ((6 + 2 + 6) * 9 + 8 + (5 + 5) * 6 * (8 + 6 + 7 + 7 + 9 * 9)) + 9
        |8 * 8
        |(3 + 7) * 2 + 2
        |2 * ((4 * 9 + 9 + 5 * 7 * 9) + 8 * 3 + 7 * 7) + ((3 * 4 + 4 + 6 * 9 + 8) * (7 * 2 * 9 + 8 + 5) * 9 * (9 * 3 * 3) + 6)
        |(4 + 6 * 5 * 7 * 7 + 6) + 9 + 8 + 8 * 3 * 8
        |7 * 6 * (3 + 5 + 6 + 4 + 5 + (2 + 2 + 7)) + 6 + 3 * (4 * (3 + 4) * 9 + 3 * (7 * 4 + 3 + 6))
        |9 * 5 * 7 + (5 + 2 * 4 * 4 + 9 + 6)
        |(6 + 2 * 8 * 6 + (5 + 9) + 3) * 5 + 6 + 4
        |6 + 8 + 5
        |6 + (8 + (6 * 3 * 5) + 4 + 5 * (5 * 6 * 2) + 8) + 3 + 9 * 8 + 6
        |3 + (2 + 9 + 2 * (8 + 2 * 3 * 6 * 9) * 2) * 4
        |7 + 4 + (8 + 7 * (3 * 2 * 7 + 2 + 3 * 8)) + 9 * ((5 + 5) + 2)
        |2 + (2 * 5 + 5 + 9 + 4) * 2 + 8 + 8
        |(2 + 4) + ((9 + 4) * 3 + 7 * 6) + 9 * 6
        |(9 * (7 + 5 + 8 + 8) + 8 + 5) + ((5 + 9 + 4 * 7 * 5) * 4 + 6 + 9 * 9)
        |4 + 8 + ((6 + 2 + 2 * 6 * 2) + 7) * 7 + (3 + 8 + 4 + 2)
        |((4 * 2 * 9 + 5 * 9) * 7) * 9 * (7 * 8 * 6 + 8 * 6 * 8)
        |(4 * (8 * 5 * 5)) + 5 + 6 * 2 + (2 + 9 + 7 + 6) * 5
        |(6 + 2) + 5
        |2 * (3 * 4) * 4 + 6
        |2 * 8 * (6 * (7 * 4 * 9) + (2 + 2) * 2 * (6 * 2 + 9)) * (7 * (2 * 5 + 3 * 8 * 4) * (3 + 7) + 6 + 2 * 5)
        |3 * 7 + (4 * 3 + 5 + 9 + 2)
        |6 * 5 * 3 + 3 * 7 * ((3 * 4 * 3 + 8 + 6) * 4)
        |(6 * 6 + 4 + 5 * 5) * 7
        |((6 + 8 + 4 + 5 + 9) * 3 + 4 * 5 + 4) * 5 + 9 + 9 * 9
        |(9 + 4 * 5 * 5 + (3 * 3 + 5)) * 5 * 4 * 9 + (4 + 5 * 9)
        |2 + (9 + 5)
        |8 * (8 + 3 * 9 + 7)
        |(9 + (4 + 2 * 4 * 6 + 7 * 2)) + 5 * (5 * (3 * 7 + 3 * 8 * 8 * 8) * 9)
        |3 * ((4 + 3 * 8 + 5) * 9) * (6 * 5 + (2 + 5 + 4 + 3 + 8 + 2))
        |6 + (3 * 3 * 5 + 9 * 8 + 8) * 7 + 9
        |(5 * 8) * 2 * ((3 * 5 + 6 * 9 * 3 * 8) + 8 + 4 + 2 + 2)
        |(6 + 4 * 6 * 6) * (3 * 6) * 8
        |((7 * 8 + 6 * 8 + 2) + 5 * 6) + 5 * 7 * 6 + 6
        |4 + 8 * 9 * (2 * 5 * 8 + 9 * (5 * 8 + 9 * 4 + 6 + 4)) + 2
        |9 * (7 * 7 * 7 * 8 * 5) + 8 + 4
        |4 * 9
        |(9 * (7 * 7 * 7 * 9)) + 6 * 7 + 4 * 8
        |7 + (5 * 9 + (9 + 8 + 5)) + 4 * 7 + 8 * 5
        |6 * 2 + (7 * 9) * 6
        |(5 * 4) * (4 + 8)
        |9 * 4 + 6 * 5 * 6 + ((8 + 9 + 8) * 8 + 6 + (4 * 2 * 2 + 3 * 6))
        |7 + (7 * 2 * 4 + 2 * 5 * 4) * 7 * (9 * 4 * 2 * 7 + 9) + 8
        |(6 + 2) + (5 * 8 + 8 + 4)
        |(8 + (8 + 8 + 3) * 6 + (6 * 9 * 4 + 7) + 2) + 8 * 8 + 4 + ((7 + 4 + 5 + 8 + 9) + 6 + 7 + 9 + 6) + 3
        |((7 + 6 + 3) * 4 + 2 + 5 + 8) * 4 * 2 * 2
        |((4 + 6 + 3 + 2 + 2) + 3 * (7 * 6 + 9 * 5 + 6 * 4) * 3) * 3 * (5 + 4 + 3 * 9) * (9 + 3 + 2 + 5 * 7 + 5) + (4 * 2 + 6) + 4
        |4 + 4 + ((2 * 4 + 9 * 8 * 5 + 8) * 9 * 9 * 6 + 9) + (6 + (5 + 9))
        |3 + 8 * (3 + 8 * (3 * 7 * 4 * 2) + (6 * 9 * 8))
        |2 + 5 + ((5 + 4) * (2 + 4) * 9 + 6) + 5 * 9
        |7 + 7 + 6
        |8 + (7 + 8 + 7 + 7 * (8 + 8 + 9 * 2 + 8 + 2) + (3 * 6 + 3 * 2))
        |4 * 9 + (4 * (7 + 7 + 7 + 8 + 5 + 2) + 4 * 6 + 2 + 6)
        |(4 * 9 * 7 + 8 + 3 + 9) + 8 + (5 * 9 + 9 + 3 + 3 + 4) * 9 * 8
        |(5 + 5 * 6) * (6 + 8 + 7) + (5 + 2 + 5 * 5 * (3 + 7 + 6 * 9)) + 9
        |4 * 2 + (4 + 5 + (3 + 5 + 9) + 7 + 7 + 4) + 3 + (6 * (2 + 2 + 8 * 8) + (8 + 9 * 7 + 7 + 6 * 9) + (3 * 9 * 3 * 5 + 5) * 5) * 3
        |7 + 2 + (4 * 3) * 7 + (2 * 3 + 7 * 9)
        |5 * 9 * 2 * (5 * 2) + 5
        |4 + 4 * 6 + (2 + 5 + 6 + 8 * 7)""".stripMargin.split("\n")

    println(inputs.map(parseLeftToRight(_)(Sum)).sum)
    println(inputs.map(parseLeftToRight(_)(HigherSum)).sum)

  }

}
